`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 31.01.2025 16:56:50
// Design Name: 
// Module Name: fp_multiplier
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////



module fp_multiplier#
(
	parameter integer DATA_WIDTH = 32,
	parameter integer MENT_WIDTH = 23,
	parameter integer EXPO_WIDTH = 8,
    parameter integer RES_WIDTH = 48
)
(
    input [DATA_WIDTH-1:0] floating1_in, 
    input [DATA_WIDTH-1:0] floating2_in,
    output [DATA_WIDTH-1:0] multi_out 
);
    //Extracting sign from input
    wire s1 = floating1_in[DATA_WIDTH-1];
    //Extracting exponent from input
    wire [EXPO_WIDTH-1:0] e1 = floating1_in[DATA_WIDTH-2:MENT_WIDTH];
    //Extracting mantissa from input
    wire [MENT_WIDTH-1:0] m1 = floating1_in[MENT_WIDTH-1:0];

    //Extracting sign from input
    wire s2 = floating2_in[DATA_WIDTH-1];
    //Extracting exponent from input
    wire [EXPO_WIDTH-1:0] e2 = floating2_in[DATA_WIDTH-2:MENT_WIDTH];
    //Extracting mantissa from input
    wire [MENT_WIDTH-1:0] m2 = floating2_in[MENT_WIDTH-1:0];


    //sign of the multi_out i.e. EXOR 
    wire s3 = s1 ^ s2;

    //adding the eponents and subtracting the bias i.e. 127 for single precision
    wire [EXPO_WIDTH:0] exp_sum = e1 + e2 - 8'd127;

    //implicit 1 needs to be appended
    wire [MENT_WIDTH:0] m1_ext = {1'b1, m1};
    wire [MENT_WIDTH:0] m2_ext = {1'b1, m2};

    //actual multiplication of mantissas
    wire [RES_WIDTH-1:0] mantissa_product = m1_ext * m2_ext;


    //NORMALIZATION
    reg [MENT_WIDTH-1:0] m3;  //final mantissa after left shifting             
    reg [EXPO_WIDTH-1:0] e3;   //final exponent after left shifting             
	reg [RES_WIDTH-1:0] shifted_mant_out;
    integer shift_amount;         
	integer i;
	
    always @(*) begin
        shift_amount = 0;
//        for (i = 47; i >= 0; i = i - 1) begin
//            if (mantissa_product[i] == 1) begin
//                shift_amount = 47 - i;
//            end
//        end
//NEED TO MAKE CHNAGES HERE
    //normalizing product and shifting the exponent if needed
        if (shift_amount == 0) begin
            m3 = mantissa_product[46:24];
            e3 = exp_sum + 1;
        end else begin
        	shifted_mant_out = (mantissa_product >> shift_amount);
            m3 = shifted_mant_out[46:24];
            e3 = exp_sum - shift_amount + 1;
        end
    end

    //handling the underflow/overflow
    wire [EXPO_WIDTH-1:0] final_exp = (e3[8]) ? 8'd0 : e3; 
    // Assemble final multi_out
    assign multi_out = {s3, final_exp, m3};

endmodule

